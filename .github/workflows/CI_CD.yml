# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI/CD

on:
  push:
    branches: [test-ci-cd]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Create .env file
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          mkdir dev
          echo "$ENV_FILE" > ./dev/.env
          cat ./dev/.env

        # shell: bash
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

        # env: # Or as an environment variable
        #   PORT: ${{ secrets.PORT }}
        #   MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
        #   REDIS_HOST: ${{ secrets.REDIS_HOST }}
        #   ENV_FILE: ${{ secrets.ENV_FILE }}
      # - run: echo "::set-env name=PORT::8000"
      # - run: echo "::set-env name=MONGODB_CONNECTION_STRING::mongodb://localhost:27017/test"
      # - run: echo "::set-env name=REDIS_HOST::${{ secrets.REDIS_HOST }}"

      - run: yarn install --frozen-lockfile

      - name: Run tests
        run: yarn ci_test

      - name: Run build
        run: yarn build

      - name: Create .ssh files
        env:
          DEPLOY_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -p $DEPLOY_PORT $DEPLOY_HOST >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Copy bundle
        env:
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          ssh -p $DEPLOY_PORT $DEPLOY_USER "rm -rf ~/_tmp/"
          ssh -p $DEPLOY_PORT $DEPLOY_USER "mkdir ~/_tmp/"
          scp -P $DEPLOY_PORT -r dist/* $DEPLOY_USER:~/_tmp/
        # ssh -p $DEPLOY_PORT $DEPLOY_USER "mv /usr/share/nginx/html/production /usr/share/nginx/html/production_old && mv /usr/share/nginx/html/_tmp_production/ /usr/share/nginx/html/production/"
        # ssh -p $DEPLOY_PORT $DEPLOY_USER "rm -rf /usr/share/nginx/html/production_old"

          /home/ec2-user/nodebackend
        # eval $(ssh-agent -s)
        # echo "$ENV_FILE" | tr -d '\r' | ssh-add - > /dev/null
        # mkdir -p ~/.ssh
        # chmod 700 ~/.ssh
        # ssh-keyscan -p $PORT $HOST >> ~/.ssh/known_hosts
        # chmod 644 ~/.ssh/known_hosts

        # - mkdir -p ~/.ssh
        # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        # - chmod 700 ~/.ssh/id_rsa
        # - eval "$(ssh-agent -s)"
        # - ssh-add ~/.ssh/id_rsa
        # - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
        # - npm install

      # 'which ssh-agent || ( apk update && apk add openssh-client )'
      # 'which curl || apk add curl'
      # eval $(ssh-agent -s)
      # echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
      # mkdir -p ~/.ssh
      # chmod 700 ~/.ssh
      # ssh-keyscan -p $PORT $HOST >> ~/.ssh/known_hosts
      # chmod 644 ~/.ssh/known_hosts
      # env:
      #     CI: true
